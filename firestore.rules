rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    match /User_Profile/{User_ProfileID}
    {
         allow create :if request.resource.data.User_ProfileID == request.auth.uid &&
         request.resource.data.Name is string &&
         request.resource.data.Age is number &&
         request.resource.data.PhoneNumber is string &&
         request.resource.data.PhoneNumber.size() == 10 &&
         request.resource.data.Gender is string &&
         request.resource.data.Gender == "Male" || request.resource.data.Gender == "male" ||
         request.resource.data.Gender == "Female" || request.resource.data.Gender == "female" &&
         request.resource.data.Sexuality is string &&
         request.resource.data.DOB is timestamp &&
         request.resource.data.Time is number &&
         request.resource.data.ProfilePicture is string &&
         request.resource.data.Interest is list && 
         request.resource.data.Interest.size() <= 7 &&
         request.resource.data.Interest is list && 
         request.resource.data.Interest.size() <= 10
         
         allow read :if request.resource.data.User_ProfileID == request.auth.uid && 
         request.auth.uid != null
         
         allow delete :if request.resource.data.User_ProfileID == request.auth.uid && 
         request.auth.uid != null
         
         
    }
    
    
    match /Home/{HomeID}
    {
         allow create :if request.resource.data.HomeID == request.auth.uid &&
         request.resource.data.swiped is path
         
         allow read :if request.resource.data.HomeID == request.auth.uid && 
         request.auth.uid != null
         
         allow delete :if request.resource.data.HomeID == request.auth.uid && 
         request.auth.uid != null
         
    }
    
    match /Chatlist/{ChatlistID}
    {
    		 match /User_Profile/{User_ProfileID}
         {
         		allow create :if request.auth.uid !=null  &&
         		resource.data.Userlist is list &&
            resource.data.Userlist[0] is map && 
            'ChatID' in resource.data.Userlist[0] &&
            'OtherUserID' in resource.data.Userlist[0] &&
            resource.data.Userlist[0].ChatID is path &&
            resource.data.Userlist[0].OtherUserID is path &&
            resource.data.Userlist[0].OtherUserID == User_ProfileID
         }
    	   
         
         allow read :if request.auth.uid !=null 
         
         allow delete :if request.auth.uid !=null 
         
    }
    
    
    match /Chats/{ChatsID}
    {
        allow create: if request.resource.data.message == request.auth.token.message;
       
      	allow read: if request.resource.data.userID ==request.auth.uid &&request.auth.uid && 
      	   request.auth.uid != null &&
   				 request.resource.data.time == request.auth.time && 
         	 request.auth.time != null &&
           request.resource.data.timeAdderID == request.auth.timeAdderID && 
           request.auth.timeAdderID != null &&
           request.resource.data.timeRemaining  == request.auth.timeRemaining && 
           request.auth.timeRemaining != null &&
           request.resource.data.totalTimeUsed == request.auth.totalTimeUsed  && 
           request.auth.totalTimeUsed  != null 
              
    }
    
    match /Blocked_Account/{Blocked_AccountID}
    {
    	  allow create: if request.auth.uid !=null &&
        	request.resource.data.Blocked is list 
        
        allow read:  if request.auth.uid !=null  
        
        allow delete: if request.auth.uid !=null 
          
           
    }
    
    
    match /Notifications/{Notifications}{
      match /Notifications/{inbox} {
      allow read, write: if request.auth.uid == resource.data.sender || request.auth.uid == resource.data.recipient;
    }
       match /Notifications/{inbox} {
     allow create: if request.auth.uid != null
                   && request.resource.data.sender == request.auth.uid
                   && request.resource.data.recipient != request.auth.uid
                   && request.resource.data.time == request.timestamp.time();
      allow update, delete: if false;
    }
      match /About/{About} {
     match /About/{document=**} {
      allow read: if true;
      allow write: if false;
    } 
     match /About/{document} {
      allow create: if false;
      allow update: if request.auth.uid != null;
      allow delete: if false;
      
      match /Content {
        allow write: if request.resource.data.keys().hasOnly(['Content', 'TimeEdited']);
      }
       
        match /TimeEdited {
        allow write: if request.resource.data.keys().hasOnly(['TimeEdited']);
      }
    
    
    }
    
    }
    }
    }}